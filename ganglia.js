// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var Bacon, centralDispatch, ganglia, kinesis, print, router, sink, source, _;

  print = require('debug')('ganglia');

  router = require('routington')();

  _ = require('underscore');

  Bacon = require('baconjs');

  kinesis = require('kinesis');

  centralDispatch = void 0;

  source = {};

  sink = {};

  ganglia = {
    define: function(path, label) {
      var node;
      if (path == null) {
        path = '';
      }
      if (label == null) {
        label = 'other';
      }
      node = router.define(path)[0];
      if (node.lebel == null) {
        node.lebel = label;
      }
      if (ganglia[label] == null) {
        ganglia[label] = new Bacon.Bus();
      }
      return ganglia;
    },
    pull: function(options, interval) {
      var f;
      if (options == null) {
        options = {
          region: 'us-east-1'
        };
      }
      if (interval == null) {
        interval = 30;
      }
      if (centralDispatch != null) {
        return ganglia;
      }
      (f = function() {
        return kinesis.listStreams(options, function(error, streams) {
          if (streams == null) {
            streams = [];
          }
          if (error != null) {
            centralDispatch.push(new Bacon.Error(error));
          }
          return _.chain(streams).filter(function(name) {
            return !(source[name] != null);
          }).map(function(name) {
            var match;
            match = router.match(name);
            if (match != null) {
              match.name = name;
            }
            return match;
          }).compact().each(function(_arg) {
            var label, name, param, stream, _ref, _ref1;
            name = _arg.name, param = _arg.param, (_ref = _arg.node, label = _ref.label);
            source[name] = stream = ganglia.createReadStream(name, options).map(function(value) {
              return {
                label: label,
                param: param,
                value: value
              };
            });
            return (_ref1 = ganglia[label]) != null ? _ref1.plug(stream) : void 0;
          });
        });
      })();
      setInterval(f, interval * 1000);
      return ganglia;
    },
    createReadStream: function(name, options) {
      var es;
      if (name == null) {
        name = '';
      }
      if (options == null) {
        options = {
          region: 'us-east-1'
        };
      }
      if (source[name] != null) {
        return source[name];
      }
      es = kinesis.createReadStream(name, options);
      return source[name] = Bacon.fromEventTarget(es, 'data').map(function(buffer) {
        var e, obj, str;
        str = buffer.toString();
        obj = void 0;
        try {
          obj = JSON.parse(str);
        } catch (_error) {
          e = _error;
          print('bad JSON');
          print(str);
        }
        return obj || str;
      }).filter(_.isObject);
    },
    createWriteStream: function(name, options) {
      var bus, es;
      if (name == null) {
        name = '';
      }
      if (options == null) {
        options = {
          region: 'us-east-1'
        };
      }
      if (sink[name] != null) {
        return sink[name];
      }
      es = kinesis.createWriteStream(name, options);
      bus = new Bacon.Bus();
      bus.onValue(function(data) {
        var e;
        if (_.isString(data)) {
          return es.write(data);
        } else {
          try {
            return es.write(JSON.stringify(data));
          } catch (_error) {
            e = _error;
            return console.log('error while stringifying data', e);
          }
        }
      });
      return sink[name] = bus;
    }
  };

  module.exports = ganglia;

}).call(this);
